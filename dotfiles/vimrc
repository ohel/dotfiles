au VimEnter * call OnVimEnter()
au GUIEnter * set lines=31 columns=107 " Set window size when starting in GUI mode.
let g:dlines=31 " Put default window size in memory.
let g:dcols=107

set encoding=utf-8
set showtabline=2 " Tab selector always visible.
set expandtab " Expand tab to spaces, use c-q<tab> for real tab.
let &shiftwidth=&tabstop " Set intend (using keys << or >>) width.
let &softtabstop=&tabstop " Set indent width in insert mode using tab.
set hidden " Do not close file buffers when opening a new one, use :ls to list buffers.
set hlsearch " Highlight search.
set autoread " Automatically update file if changed from the outside.
set backspace=indent,eol,start " Make backspace clear other than new text also.
set guicursor=n-v-c:hor25-Cursor " Set cursor size.
set nocp " Nocompatible: enables features which are not Vi compatible.
set ic " Set ignore case on searches, remedy with set noic or use \C in search term.
set number  " Line numbering.
set textwidth=0 " Define text width if autowrapping: 0 disables autowrap, wraps to 80 on manual wrap (gq).
let g:leave_my_textwidth_alone=1 " Don't autowrap lines while typing.
set go-=T " Hide toolbar.
set go-=m " Hide menu.
set go-=t " Disable tear-off menus.
set go-=r " Disable right scroll bar.
set incsearch " Incremental search.
set virtualedit=block " Allow selecting non-characters in visual block mode.
set noswapfile
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif " Returns cursor to previous position when opening files.
set pastetoggle=<f4> " Toggle paste mode (no auto indent).

" Same as "let mapleader = ' '", but more flexible.
map <space> <leader>

" Last command.
nnoremap <silent><leader>c :<up><cr>

" Sort.
if executable('sort')
    vnoremap <leader>s :!sort<cr>
endif

" Change directory to that of the current file.
nnoremap <leader>d :cd %:h<cr>:echo "wd is now" getcwd()<cr>

if executable('rg')
    set grepprg=rg\ --smart-case\ --vimgrep\ -uu\ $*
    set grepformat=%f:%l:%c:%m
elseif executable('ag')
    set grepprg=ag\ --smart-case\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
endif

" Generic tab complete.
function! TabOrComplete()
    if col('.') > 1 && strpart( getline('.'), col('.')-2, 2 ) =~ '^\w'
        if empty(&omnifunc)
            return "\<c-n>"
        else
            return "\<c-x>\<c-o>"
        endif
    else
        return "\<Tab>"
    endif
endfunction
inoremap <tab> <c-r>=TabOrComplete()<cr>

" Insert real tab on shift-tab.
inoremap <s-tab> <c-q><tab>

let g:zoom_functions = 1
let $VIMHOME=$HOME . "/.vim"

if has('win32') || has ('win64')

    " Vim in MinGW always uses .vim.
    if !isdirectory($HOME . "/.vim")
        let $VIMHOME=$HOME . "/_vim"
    endif

    set guifont=ProggyCleanTTSZ:h12:cANSI
    let g:dfont="ProggyCleanTTSZ"
    let g:daltfont="Consolas"

else

    if !filereadable($VIMHOME . "/colors/minigun.vim")
        if !isdirectory($VIMHOME . "/colors")
            silent call mkdir($VIMHOME . "/colors")
        endif
        echo("Downloading color scheme...")
        silent !curl -fLo $VIMHOME/colors/minigun.vim --create-dirs https://raw.githubusercontent.com/ohel/dotfiles/master/themes/minigun.vim
    endif

    set clipboard=unnamedplus " Alias unnamed register to +.

    set guifont=Monospace\ 12
    let g:dfont="Monospace"
    let g:daltfont="Monospace"

    " Create default ctags database with a command such as:
    " ctags -R -f ctagsdb --c++-kinds=+p --fields=+iaS --extra=+q /usr/lib64/gcc/x86_64-pc-linux-gnu/$(ls -t1 /usr/lib64/gcc/x86_64-pc-linux-gnu/)/include/
    if executable('ctags')
        nnoremap <c-f1> :!ctags -R -f $VIMHOME/ctagsdb --c++-kinds=+p --fields=+iaS --extra=+q .<cr>
    endif

    " Plugins checking.
    if !isdirectory($VIMHOME . "/autoload")
        silent call mkdir($VIMHOME . "/autoload")
    endif
    if !filereadable($VIMHOME . "/autoload/plug.vim")
        echo("Downloading vim-plug...")
        silent !curl -fLo $VIMHOME/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    endif
    if !filereadable($VIMHOME . "/autoload/pathogen.vim")
        echo("Downloading pathogen...")
        silent !curl -fLo $VIMHOME/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    endif
    if !isdirectory($VIMHOME . "/bundle")
        silent call mkdir($VIMHOME . "/bundle")
    endif

endif

if filereadable($VIMHOME . "/colors/minigun.vim") || filereadable($VIMRUNTIME . "/colors/minigun.vim")
    colorscheme minigun
endif

if !isdirectory($VIMHOME . "/undodir")
    silent call mkdir ($VIMHOME . "/undodir", "p")
endif
set undodir=$VIMHOME/undodir
set undofile

" Syntax and file type detection etc.
syntax on
filetype on
au BufNewFile,BufRead *.xaml set filetype=xml
au BufNewFile,BufRead *.md set filetype=markdown
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType cpp set tags +=$VIMHOME/ctagsdb

if filereadable($VIMHOME . "/autoload/plug.vim")
    silent! call plug#begin($VIMHOME . "/plugged")
endif
if exists("*plug#begin")
    Plug 'jreybert/vimagit'
    Plug 'justinmk/vim-gtfo'
    Plug 'kana/vim-arpeggio'
    Plug 'leafgarland/typescript-vim'
    Plug 'maksimr/vim-jsbeautify', { 'do': 'cd $VIMHOME/plugged/vim-jsbeautify && git submodule update --init --recursive' }
    Plug 'Shougo/unite-outline' " Unite source providing outline view of current buffer.
    Plug 'Shougo/unite.vim'
    Plug 'Shougo/vimproc.vim', { 'do': 'cd $VIMHOME/plugged/vimproc.vim && make -f make_unix.mak' } " Allows async operations.
    Plug 'tomtom/tcomment_vim' " Code commenting.
    Plug 'Valloric/YouCompleteMe', { 'on': [], 'do': 'cd $VIMHOME/plugged/YouCompleteMe && ./install.py' }
    " Default trigger for prettier is: <leader>p
    Plug 'prettier/vim-prettier', {
      \ 'do': 'yarn install',
      \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown'] }
    call plug#end()
endif

" https://github.com/tpope/vim-pathogen
if filereadable($VIMHOME . "/autoload/pathogen.vim")
    silent! execute pathogen#infect()
endif

" https://github.com/Quramy/tsuquyomi
if isdirectory($VIMHOME . "/bundle/tsuquyomi")
    autocmd FileType typescript setlocal completeopt+=menu,preview
endif

" http://vim-taglist.sourceforge.net/
if filereadable($VIMHOME . "/plugin/taglist.vim")
    nnoremap <f1> :TlistToggle<cr>
    inoremap <f1> <c-o>:TlistToggle<cr>
endif

" https://github.com/rkulla/pydiction
if filereadable($VIMHOME . "/after/ftplugin/python_pydiction.vim")
    let g:pydiction_location = '$VIMHOME/pydiction/complete-dict'
    let g:pydiction_menu_height = 15
endif

if isdirectory($VIMHOME . "/plugged/tcomment_vim")
    let g:tcomment_opleader1 = 'å'
endif

" A '-d directory' style syntax is assumed by vim-gtfo, but xfce4-terminal only
" supports '--dir=directory' style syntax, so we use a workaround function.
if isdirectory($VIMHOME . "/plugged/vim-gtfo") && executable('xfce4-terminal')
    let g:gtfo#terminals = { 'unix' : 'gtfo() { xfce4-terminal --default-working-directory="$1"; } && gtfo' }
endif

" YCM may be a bit too intrusive so load it only on demand.
if isdirectory($VIMHOME . "/plugged/YouCompleteMe")
    function! LoadYCM()
        call plug#load('YouCompleteMe') | call youcompleteme#Enable() | YcmCompleter
    endfunction
    nnoremap <a-t> :call LoadYCM()<cr>:echo "YouCompleteMe loaded."<cr>
endif

if isdirectory($VIMHOME . "/plugged/vim-arpeggio")
    " Insert mode toggles, grave moves to ^ (editing mark).
    call arpeggio#map('i', '', 0, 'fj', '<esc>`^')
    call arpeggio#map('n', '', 0, 'fj', 'i<c-r>=col(".") == col("$")-1 ? "\<lt>right>" : ""<cr>')
endif

if isdirectory($VIMHOME . "/plugged/unite.vim")
    if executable('rg')
        let g:unite_source_grep_command = 'rg'
        let g:unite_source_grep_default_opts = '--vimgrep --smart-case -uu'
        let g:unite_source_grep_recursive_opt = ''
        let g:unite_source_rec_git_command= ['rg', '--color', 'never', '--follow', '--no-heading', '--with-filename', '--files', '-g', '']
    elseif executable('ag')
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts = '--vimgrep --smart-case --silent'
        let g:unite_source_grep_recursive_opt = ''
        let g:unite_source_rec_git_command= ['ag', '--nocolor', '--follow', '--nogroup', '-g', '']
    endif

    let g:unite_source_rec_async_command = ['find', '-L']

    call unite#custom#profile('default', 'context', {
        \ 'prompt' : '» ',
        \ 'winheight' : 20,
        \ 'direction' : 'bot',
        \ 'short_source_names' : 1
    \ })

    call unite#custom_source('menu', 'matchers', ['matcher_fuzzy'])
    call unite#custom_source('source', 'matchers', ['matcher_fuzzy'])
    call unite#custom_source('outline', 'matchers', ['matcher_fuzzy'])
    call unite#custom_source('history/yank', 'matchers', ['matcher_fuzzy'])
    call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep', 'ignore_pattern', join([
         \ '.a$',
         \ '.aux$',
         \ '.bak$',
         \ 'bower_components/',
         \ '\.git/',
         \ '.jar$',
         \ '.lib$',
         \ 'node_modules/',
         \ '.o$',
         \ '.obj$',
         \ '.out$',
         \ '.sass-cache',
         \ '.so$',
         \ 'tmp/',
         \ '.toc$',
         \ '\.tscache/'
         \ ], '\|'))
endif



" Uppercase commands to counteract common typos.
command W w
command Q q
command WQ wq
command Wq wq

" Convert Alt Gr + space to normal space (counteract a common typo).
inoremap   <space>



" Save.
inoremap <c-s> <c-r>=col('.') == col('$') ? "\<lt>esc>`^:w\<lt>cr>a" : "\<lt>esc>`^:w\<lt>cr>i"<cr>
nnoremap <c-s> :w<cr>

" Tab navigation.
nnoremap <c-tab> :tabnext<cr>
nnoremap <c-s-tab> :tabprevious<cr>
inoremap <c-tab> <c-o>:tabnext<cr>
inoremap <c-s-tab> <c-o>:tabprevious<cr>
vnoremap <c-tab> <esc>:tabnext<cr>
vnoremap <c-s-tab> <esc>:tabprevious<cr>

" Select all.
inoremap <c-a> <esc>gg<s-v>G

" Wrap to next/previous line on arrow key presses.
inoremap <silent> <left> <c-r>=col('.') == 1 ? "\<lt>c-o>gkg$" : "\<lt>left>"<cr>
inoremap <silent> <right> <c-r>=col('.') == col('$') ? "\<lt>c-o>gjg0" : "\<lt>right>"<cr>

" Emulate common shift + keys functionality.
inoremap <silent> <s-up> <c-o>v<up>
vnoremap <silent> <s-up> <up>
inoremap <silent> <s-down> <c-o>v<down>
vnoremap <silent> <s-down> <down>
inoremap <silent> <s-left> <c-r>=col('.') == 1 ? "\<lt>c-o>gkg$v" : "\<lt>c-o>hv"<cr>
inoremap <silent> <s-right> <c-r>=col('.') == col('$') ? "\<lt>c-o>gjg0v" : "\<lt>c-o>v"<cr>
inoremap <silent> <s-home> <left><c-o>v<home>
inoremap <silent> <s-end> <c-o>v<end><left>

" Common copy hotkeys.
nnoremap <c-insert> V"+y<esc>:echo "Line copied."<cr>
vnoremap <c-insert> "+y<esc>:echo "Copied."<cr>
vnoremap <c-c> "+y<esc>:echo "Copied."<cr>
" Go to visual mode for copying word under cursor.
inoremap <c-insert> <esc>`^bve

" Common insert hotkeys.
nnoremap <s-insert> "+P
inoremap <s-insert> <c-r>=col('.') == col('$') ? "\<lt>esc>`^\"+pa" : "\<lt>esc>`^\"+Pa"<cr>
inoremap <c-v> <c-r>=col('.') == col('$') ? "\<lt>esc>`^\"+pa" : "\<lt>esc>`^\"+Pa"<cr>
cnoremap <c-b> <c-r>"
" Replace contents.
vnoremap <silent> <expr> <s-insert> mode() ==# "V" ? "\"+P" : ":<esc>`>:execute col('.') == col('$')-1 ? \"normal! gv\\\"_x\\\"+p\" : \"normal! gv\\\"_x\\\"+Pl\"<cr>"
vnoremap <silent> <expr> <c-v> mode() ==# "V" ? "\"+P" : ":<esc>`>:execute col('.') == col('$')-1 ? \"normal! gv\\\"_x\\\"+p\" : \"normal! gv\\\"_x\\\"+Pl\"<cr>"

" Common search hotkey.
inoremap <c-f> <esc>`^/
nnoremap <c-f> /
vnoremap <c-f> <esc>/<c-r>*<cr>

" Common search and replace hotkey.
nnoremap <c-h> :%s/\v/g\|:silent noh<left><left><left><left><left><left><left><left><left><left><left><left><left><left>
vnoremap <c-h> :s/\v/g\|:silent noh<left><left><left><left><left><left><left><left><left><left><left><left><left><left>



" Select and scroll up/down for dropdown lists (c-j also works for selection).
inoremap <a-k> <up>
inoremap <a-j> <down>
inoremap <a-h> <cr>
" Mainly for taglist plugin etc. to select ergonomically using home row.
nmap <c-j> <cr>

" Move screen lines.
inoremap <home> <c-o>g0
inoremap <end> <c-o>g$
" These disable functionality with menus, use mapped up/down instead from above.
inoremap <up> <c-o>gk
inoremap <down> <c-o>gj



" Switch to alternate file (usually previously edited buffer).
inoremap <a-s> <c-o>:b#<cr>
nnoremap <a-s> :b#<cr>

" Uppercase word under cursor.
nnoremap <a-u> gUiw

" Toggle menubar.
nnoremap <f5> :if &go=~#'m'<bar>set go-=m<bar>else<bar>set go+=m<bar>endif<cr>
inoremap <f5> <esc>:if &go=~#'m'<bar>set go-=m<bar>else<bar>set go+=m<bar>endif<cr>

inoremap <c-space> <esc>`^
nnoremap <c-space> i
nnoremap <enter> i<c-r>=col('.') == col('$')-1 ? "\<lt>right>" : ""<cr>

" Center search matches.
nnoremap n nzz
nnoremap N Nzz

" Clear search highlight.
nnoremap <silent> <c-n> :silent noh<cr>

" Incremental search next without highlight and select match.
cnoremap <c-cr> <cr>:noh<cr>zz
cnoremap <c-n> <cr>:noh<cr>/<up>
cnoremap <a-n> <cr>NN:noh<cr>/<up>

" Close window.
nnoremap <a-w> <c-w>c
vnoremap <a-w> <c-w>c
inoremap <a-w> <esc><c-w>c
nnoremap <c-f4> <c-w>c
vnoremap <c-f4> <c-w>c
inoremap <c-f4> <esc><c-w>c



function! SetTabWidth(newwidth)
    let &tabstop=a:newwidth
    let &shiftwidth=a:newwidth
    let &softtabstop=a:newwidth
    echo "Tab width set to:" a:newwidth
endfunction

silent call SetTabWidth(4) " Default tab width.

function! WhitespaceToTabWidth()
    normal! ^
    let tabwidth = col('.') - 1
    if tabwidth > 0
        call SetTabWidth(tabwidth)
    endif
endfunction

" Set tab width to current line whitespace width.
nnoremap <leader><tab> :call WhitespaceToTabWidth()<cr>

" Relative line numbering came in Vim 7.3.
if version >= 703
    function! ToggleRelativeNumbering()
        if &rnu
            set rnu!
            echo "Absolute numbering set."
        else
            set relativenumber
            echo "Relative numbering set."
        endif
        return ''
    endfunction
    inoremap <silent> <f3> <c-r>=ToggleRelativeNumbering()<cr>
    nnoremap <silent> <f3> :call ToggleRelativeNumbering()<cr>
endif

function! ToggleWrap()
    if &wrap
        set nowrap
        echo "No wrap set."
    else
        set wrap
        echo "Wrap set."
    endif
    return ''
endfunction
inoremap <silent> <f2> <c-r>=ToggleWrap()<cr>
nnoremap <silent> <f2> :call ToggleWrap()<cr>

" Print file info: encoding and format.
function! PrintFileInfo()
    redir => filename
    silent !echo %:p
    redir END
    let filename = substitute(filename, '.*\n\(.*\n\)', '\1', '')
    let n = confirm(filename . "\n" . &fileencoding . "\n" . &ff, "", 1, "Info")
endfunction
nnoremap <f6> :call PrintFileInfo()<cr>

" Set file encoding dialog.
function! SetFileEncoding()
    let n = confirm("Select file encoding:\n(current: " . &fileencoding . ")", "&UTF-8\n&ISO-8859-1\n&Cancel", 3, "Question")
    if n == 1
        set fileencoding=utf-8
    elseif n == 2
        set fileencoding=iso-8859-1
    endif
endfunction
nnoremap <f7> :call SetFileEncoding()<cr>

" Set file format dialog.
function! SetFileFormat()

    let n = confirm("Select format for writing the file:\n(current: " . &ff . ")", "&Unix\n&Dos\n&Mac\n&Cancel", 4, "Question")
    if n == 1
        set ff=unix
    elseif n == 2
        set ff=dos
    elseif n == 3
        set ff=mac
    endif

endfunction
nnoremap <f8> :call SetFileFormat()<cr>

" Font zooming.
if exists("g:zoom_functions") && g:zoom_functions == "1"

    if !exists("g:zoom_level")
        let g:zoom_level=0
    endif

    function! GrowFont()
        let fontsize = substitute(&guifont, '[^0-9]', '', 'g')
        let fontname = substitute(&guifont, '[0-9 ]', '', 'g')
        let fontname = substitute(fontname, ':h:cANSI', '', 'g')
        if g:zoom_level == 15
            return ''
        endif
        let fontsize = fontsize + 2
        let g:zoom_level = g:zoom_level + 1
        if g:zoom_level == 1
            let fontname = g:daltfont
            let fontsize = 10
        endif
        if has('win32') || has ('win64')
            let &guifont = fontname . ":h" . fontsize . ":cANSI"
        else
            let &guifont = fontname . " " . fontsize
        endif
        let &lines=g:dlines
        let &columns=g:dcols
        echo "Font set to: " &guifont
        return ''
    endfunction

    function! ShrinkFont()
        let fontsize = substitute(&guifont, '[^0-9]', '', 'g')
        let fontname = substitute(&guifont, '[0-9 ]', '', 'g')
        let fontname = substitute(fontname, ':h:cANSI', '', 'g')
        if g:zoom_level == 0
            return ''
        endif
        let fontsize = fontsize - 2
        let g:zoom_level = g:zoom_level - 1
        if g:zoom_level == 0
            let fontname = g:dfont
            let fontsize = 12
        endif
        if has('win32') || has ('win64')
            let &guifont = fontname . ":h" . fontsize . ":cANSI"
        else
            let &guifont = fontname . " " . fontsize
        endif
        let &lines=g:dlines
        let &columns=g:dcols
        echo "Font set to: " &guifont
        return ''
    endfunction

    nnoremap + :call GrowFont()<cr>
    nnoremap - :call ShrinkFont()<cr>
    inoremap <c-kplus> <c-r>=GrowFont()<cr>
    nnoremap <c-kplus> :call GrowFont()<cr>
    inoremap <c-kminus> <c-r>=ShrinkFont()<cr>
    nnoremap <c-kminus> :call ShrinkFont()<cr>
    inoremap <c-mousedown> <c-r>=GrowFont()<cr>
    nnoremap <c-mousedown> :call GrowFont()<cr>
    inoremap <c-mouseup> <c-r>=ShrinkFont()<cr>
    nnoremap <c-mouseup> :call ShrinkFont()<cr>
endif

function! OnVimEnter()

    " Unite
    if exists(":Unite")
        nnoremap <leader>b :Unite buffer<cr>

        if !(has('win32') || has('win64')) && (executable('rg') || executable('ag') || executable('find'))
            nnoremap <leader>f :Unite -start-insert file_rec/async buffer<cr>
            vnoremap <leader>f :Unite -start-insert file_rec/async buffer<cr><c-r>*
        elseif executable('git')
            nnoremap <leader>f :Unite -start-insert file_rec/git buffer<cr>
            vnoremap <leader>f :Unite -start-insert file_rec/git buffer<cr><c-r>*
        endif

        nnoremap <leader>u :UniteResume<cr>
        nnoremap <leader>o :Unite outline<cr>
        nnoremap <leader>g :Unite grep:.:<cr>
        " Search selected text.
        vnoremap <leader>g :Unite grep:.::<c-r>*<cr>
        " Search current filename.
        nnoremap <leader>gf :Unite grep:.::<c-r>=expand('%:t')<cr><cr>
        " Search Angular.js keywords.
        nnoremap <leader>ga :Unite -start-insert grep:.::\\.(filter\|provider\|controller\|directive\|factory\|service)\\(\\'.+\\'<cr>
    endif

    " jsbeautify
    if exists("*JsBeautify")
        nnoremap <leader>j :call JsBeautify()<cr>:set syntax=json<cr>
    endif

    " vimagit
    if exists(":Magit")
        nnoremap <silent><leader>m :Magit<cr>
    endif

    " tcomment
    if exists("g:loaded_tcomment")
        " Toggle comment for the current/selected line(s).
        " For some reason this does not work here:
        " :execute "normal! " . eval(string(g:tcomment_opleader1)) . "c"<cr>
        nmap <silent><a-c> åc
        vmap <silent><a-c> å
        imap <silent><a-c> <esc>åc^
    endif

endfunction



" Netrw explorer config.
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+' " Hide dotfiles by default in Netrw Directory Listing.
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
function! ToggleNetrw()
    if &ft ==# "netrw"
        :exe "normal \<c-w>c"
    else
        :exe "normal :Vexplore .\<cr>"
    endif
endfunction
nnoremap <silent><leader>n :call ToggleNetrw()<cr>



" Host specific stuff.
if hostname() == "minigun"
    set guifont=ProggyCleanTTSZ\ 12
    let g:dfont="ProggyCleanTTSZ"
elseif hostname() == "gainasus"
    let g:dfont="ProggyCleanTTSZ"
    let g:zoom_level=2
elseif hostname() == "oheldell"
    au GUIEnter * set lines=35 columns=130
    let g:dfont="ProggyCleanTTSZ"
    let g:dlines=35
    let g:dcols=130
    let g:zoom_level=2
    silent call SetTabWidth(2)
endif
