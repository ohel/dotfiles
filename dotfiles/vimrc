" Note: if mapping Alt key combinations they might prevent some keys from working over SSH.
" One such combination is <a-d> which would disable 'Ã¤' on a Finnish keyboard.

autocmd VimEnter * call OnVimEnter()
autocmd GUIEnter * set lines=31 columns=107 " Set window size when starting in GUI mode.
autocmd BufReadPost * call OnBufferRead()

let g:dlines = 31 " Also set default size into memory.
let g:dcols = 107
let g:leave_my_textwidth_alone = 1 " Don't autowrap lines while typing.

set autoread " Automatically update file if changed from the outside.
set backspace=indent,eol,start " Make backspace clear other than new text also.
set encoding=utf-8
set expandtab " Expand tab to spaces, use <c-q><tab> for real tab.
set go-=m " Hide menu.
set go-=r " Disable right scroll bar.
set go-=t " Disable tear-off menus.
set go-=T " Hide toolbar.
set guicursor=n-v-c:hor25-Cursor " Set cursor size.
set hidden " Do not close file buffers when opening a new one, use :ls to list buffers.
set hlsearch " Highlight search.
set ic " Set ignore case on searches, remedy with set noic or use \C in search term.
set incsearch " Incremental search.
set noswapfile
set number  " Line numbering.
set pastetoggle=<f4> " Toggle paste mode (no auto indent).
set showtabline=2 " Tab selector always visible.
set textwidth=0 " Define text width if autowrapping: 0 disables autowrap, wraps to 80 on manual wrap (gq).
set virtualedit=block " Allow selecting non-characters in visual block mode.
set completeopt=menu,preview,longest " Omni completion options.

if version >= 800
    set termguicolors " Use truecolor if possible. Support came in version 7.4.1770.
endif

" Almost like "let mapleader = ' '", but doesn't matter when a leader shortcut is bound.
map <space> <leader>

" Last command.
nnoremap <silent> <leader>l :<up><cr>
vnoremap <silent> <leader>l :<up><cr>

" Sort.
if executable('sort')
    vnoremap <leader>s :!sort<cr>
endif

" Change directory to that of the current file.
nnoremap <leader>d :cd %:h<cr>:echo "wd is now" getcwd()<cr>

let s:grep_ignore = ''
let s:grep_ignore_file = $HOME . '/.config/grep_ignore'
if executable('rg')
    if filereadable(s:grep_ignore_file)
        let s:grep_ignore = '--ignore-file ' . s:grep_ignore_file
    endif
    let &grepprg = 'rg --smart-case --vimgrep -uu ' . s:grep_ignore . ' $*'
    set grepformat=%f:%l:%c:%m
elseif executable('ag')
    if filereadable(s:grep_ignore_file)
        let s:grep_ignore = '--exclude-from=' . s:grep_ignore_file
    endif
    let &grepprg = 'ag --smart-case --vimgrep ' . s:grep_ignore . ' $*'
    set grepformat=%f:%l:%c:%m
endif

" Generic tab complete.
function TabOrComplete()
    if col('.') > 1 && strpart( getline('.'), 0, col('.') ) =~ '.*/\S*$'
        return "\<c-x>\<c-f>"
    elseif col('.') > 1 && strpart( getline('.'), col('.')-2, 2 ) =~ '^\w'
        if empty(&omnifunc)
            return "\<c-x>\<c-n>"
        else
            return "\<c-x>\<c-o>"
        endif
    else
        return "\<Tab>"
    endif
endfunction
inoremap <tab> <c-r>=TabOrComplete()<cr>

" Insert real tab on shift-tab.
inoremap <s-tab> <c-q><tab>

let g:zoom_functions = 1
let $VIMHOME = $HOME . '/.vim'

if has('win32') || has ('win64')

    " Vim in MinGW always uses .vim.
    if !isdirectory($HOME . '/.vim')
        let $VIMHOME = $HOME . '/_vim'
    endif

    set guifont=Consolas:h12:cANSI

else

    if !filereadable($VIMHOME . '/colors/minigun.vim')
        if !isdirectory($VIMHOME . '/colors')
            silent call mkdir($VIMHOME . '/colors', 'p')
        endif
        echo('Downloading color scheme...')
        silent !curl -fLo $VIMHOME/colors/minigun.vim --create-dirs https://raw.githubusercontent.com/ohel/dotfiles/master/themes/minigun.vim
    endif

    set clipboard=unnamedplus " Alias unnamed register to + (X11 clipboard).

    set guifont=Monospace\ 10

    " Plugins checking.
    if !isdirectory($VIMHOME . '/autoload')
        silent call mkdir($VIMHOME . '/autoload', 'p')
    endif
    if !filereadable($VIMHOME . '/autoload/plug.vim')
        echo('Downloading vim-plug...')
        silent !curl -fLo $VIMHOME/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    endif

endif

" Note: on Windows the colorscheme might not be found unless it is copied under
" the global installation directory, e.g.
" C:\Program Files (x86)\Vim\vimfiles\colors
if filereadable($VIMHOME . '/colors/minigun.vim') || filereadable($VIMRUNTIME . '/colors/minigun.vim')
    colorscheme minigun
endif

if !isdirectory($VIMHOME . '/undodir')
    silent call mkdir ($VIMHOME . '/undodir', 'p')
endif
set undodir=$VIMHOME/undodir
set undofile

" Syntax and file type detection etc.
syntax on
filetype on
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd BufNewFile,BufRead *.md set filetype=markdown | set omnifunc=
autocmd BufNewFile,BufRead *.xaml set filetype=xml
autocmd BufNewFile,BufRead *.jsonl set filetype=json
let g:markdown_fenced_languages = ['html', 'xml', 'js=javascript', 'javascript', 'json=javascript', 'ts=typescript', 'typescript', 'sh', 'yml=yaml', 'yaml']



" Exuberant Ctags and compile commands
" ************************************
if executable('ctags')
    " Some versions call the parameter 'extras' while others call it 'extra'.
    let s:ctags_extras = system('ctags -L /dev/null -f /dev/null --extras && echo extras || echo extra')

    set tags+=;/,tags;/ " Search tags file from upper directory levels if not found in current directory.
    autocmd FileType c set tags+=$VIMHOME/tags_c
    autocmd FileType cpp set tags+=$VIMHOME/tags_cpp

    if !filereadable($VIMHOME . '/tags_cpp')
        call system('ctags -R -f ' . $VIMHOME . '/tags_cpp --c++-kinds=+p --fields=+iaS --' . s:ctags_extras . '=+q /usr/lib/gcc/x86_64*/$(ls -1 /usr/lib/gcc/x86* | sort -g | tail -n 1)/include/')
    endif
endif

" Create Compile Commands Or Ctags
function CCCOC()
    if filereadable('platformio.ini')
        silent !pio run -t compiledb
        echo('Created compile commands')
    elseif filereadable('../platformio.ini')
        cd ..
        silent !pio run -t compiledb
        cd -
        echo('Created compile commands')
    elseif exists('s:ctags_extras')
        call system('ctags -R -f ./tags --c++-kinds=+p --fields=+iaS --' . s:ctags_extras . '=+q .')
        echo('Created tags file')
    endif
endfunction

nnoremap <c-f1> :call CCCOC()<cr>



" Plugged plugins.
" ****************

if filereadable($VIMHOME . '/autoload/plug.vim')
    silent! call plug#begin($VIMHOME . '/plugged')
endif
if exists('*plug#begin')
    Plug 'ap/vim-css-color' " Display color codes in corresponding color.
    Plug 'jreybert/vimagit' " Git integration.
    Plug 'justinmk/vim-gtfo' " Open terminal or file manager.
    Plug 'kana/vim-arpeggio' " Do stuff with configurable key combinations.
    Plug 'pangloss/vim-javascript' " Nicer JavaScript syntax highlighting etc.
    Plug 'leafgarland/typescript-vim' " TypeScript syntax.
    Plug 'maxmellon/vim-jsx-pretty' " React syntax.
    Plug 'prettier/vim-prettier', { 'do': 'which npm && npm install' } " Code styling.
    Plug 'Shougo/unite.vim' " Search and display information from various sources.
    Plug 'Shougo/unite-outline' " Unite source providing outline view of current buffer.
    if !has('nvim')
        Plug 'Shougo/vimproc.vim', { 'do': 'cd $VIMHOME/plugged/vimproc.vim && make -f make_unix.mak' } " Allows async operations.
    endif
    Plug 'tomtom/tcomment_vim' " Code commenting.
    Plug 'vim-airline/vim-airline' " Status/tabline.
    Plug 'tpope/vim-fugitive' " Git wrapper.
    Plug 'tommcdo/vim-fugitive-blame-ext' " Git blame status line.
    Plug 'pprovost/vim-ps1' " PowerShell support.
    Plug 'powerman/vim-plugin-AnsiEsc' " ANSI escape sequences, e.g. colored text.
    Plug 'jparise/vim-graphql' " GraphQL support.
    Plug 'nathanaelkane/vim-indent-guides' " Indent guides.
    Plug 'Quramy/vim-js-pretty-template' " JavaScript's Template Strings highlighting.
    Plug 'digitaltoad/vim-pug' " Pug (Jade) syntax.
    Plug 'rkulla/pydiction' " Python autocompletion.
    Plug 'udalov/kotlin-vim' " Kotlin support.
    Plug 'elzr/vim-json' " Better JSON(L) syntax highlighting.

    " Tag List - an old school source code browser plugin. Needs ctags to work.
    if executable('ctags')
        Plug 'yegappan/taglist'
    endif

    " CoC and Copilot require Node.js so check everything before loading the plugins.
    if executable('node')
        let s:node_path='node'
    endif
    if isdirectory($NVM_DIR) " If using nvm, use the latest version.
        let s:node_path = system('ls -1v ' . $NVM_DIR . '/versions/node/*/bin/node | tail -n 1 | tr -d "\n"')
        let s:tsserver_path = system('ls -1v ' . $NVM_DIR . '/versions/node/*/lib/node_modules/typescript/lib/tsserver.js | tail -n 1 | tr -d "\n"')
        if !filereadable(s:tsserver_path)
            let s:npm_path=system('ls -1v ' . $NVM_DIR . '/versions/node/*/bin/npm | tail -n 1 | tr -d "\n"')
            if filereadable(s:npm_path)
                :echo 'TypeScript is missing, installing it globally.'
                let $install_ts_server_cmd = s:npm_path . ' i -g typescript'
                silent !$install_ts_server_cmd
            endif
        endif
    endif

    " Conquer of Completion: code completion.
    " Go to ~/.config/coc/extensions and use npm to manage extensions.
    let g:coc_start_at_startup = 0
    if exists('s:node_path') && filereadable(s:node_path)
        " Set to path for plugins that expect a global node binary, e.g. Prettier.
        let $PATH = s:node_path[:-6] . ':' . $PATH

        let g:coc_node_path=s:node_path
        Plug 'neoclide/coc.nvim', {'branch': 'release'}

        " GitHub Copilot
        if version >= 900
            let g:copilot_node_command=s:node_path
            " Disable Copilot by default.
            let g:copilot_enabled = v:false
            Plug 'github/copilot.vim', {'branch': 'release'}
        endif
    endif

    call plug#end()
endif

if isdirectory($VIMHOME . '/plugged/tcomment_vim')
    let g:tcomment_opleader1 = 'Ã¥'
endif

" A '-d directory' style syntax is assumed by vim-gtfo, but xfce4-terminal only
" supports '--dir=directory' style syntax, so we use a workaround function.
if isdirectory($VIMHOME . '/plugged/vim-gtfo') && executable('xfce4-terminal')
    let g:gtfo#terminals = { 'unix' : 'gtfo() { xfce4-terminal --default-working-directory="$1"; } && gtfo' }
endif

if isdirectory($VIMHOME . '/plugged/unite.vim')
    if executable('rg')
        let g:unite_source_grep_command = 'rg'
        let g:unite_source_grep_default_opts = '--vimgrep --smart-case -uu ' . s:grep_ignore
        let g:unite_source_grep_recursive_opt = ''
        let g:unite_source_rec_git_command = ['rg', '--color', 'never', '--follow', '--no-heading', '--with-filename', '--files', '-g', '']
    elseif executable('ag')
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts = '--vimgrep --smart-case --silent ' . s:grep_ignore
        let g:unite_source_grep_recursive_opt = ''
        let g:unite_source_rec_git_command = ['ag', '--nocolor', '--follow', '--nogroup', '-g', '']
    endif

    let g:unite_source_rec_async_command = ['find', '-L']

    if exists(':Unite')
        call unite#custom_source('menu', 'matchers', ['matcher_fuzzy'])
        call unite#custom_source('source', 'matchers', ['matcher_fuzzy'])
        call unite#custom_source('outline', 'matchers', ['matcher_fuzzy'])
        call unite#custom_source('history/yank', 'matchers', ['matcher_fuzzy'])
        call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep', 'ignore_pattern', join([
             \ '\.a$',
             \ '\.aux$',
             \ '\.bak$',
             \ 'bower_components/',
             \ '\.git/',
             \ '\.jar$',
             \ '\.lib$',
             \ 'node_modules/',
             \ '\.o$',
             \ '\.obj$',
             \ '\.out$',
             \ '\.sass-cache',
             \ '\.so$',
             \ 'tmp/',
             \ '\.toc$',
             \ '\.tscache/',
             \ '.*main-es.*\.js$'
             \ ], '\|'))
    endif
endif

if isdirectory($VIMHOME . '/plugged/vim-airline')
    if !filereadable($VIMHOME . '/autoload/airline/themes/minigun.vim')
        if !isdirectory($VIMHOME . '/autoload/airline/themes')
            silent call mkdir($VIMHOME . '/autoload/airline/themes', 'p')
        endif
        echo('Downloading airline color scheme...')
        silent !curl -fLo $VIMHOME/autoload/airline/themes/minigun.vim --create-dirs https://raw.githubusercontent.com/ohel/dotfiles/master/themes/minigun-airline.vim
    endif
    let g:airline_theme = 'minigun'
endif

" Pydiction autocompletion.
if filereadable($VIMHOME . '/plugged/pydiction/complete-dict')
    let g:pydiction_location = '$VIMHOME/plugged/pydiction/complete-dict'
    let g:pydiction_menu_height = 15
endif

" JSON syntax conceal.
let g:vim_json_syntax_conceal = 0
function ToggleJsonSyntaxConceal()
    if &l:conceallevel == 0
        setlocal conceallevel=2
        let g:vim_json_syntax_conceal = 1
        e " Reload for conceal to work.
    else
        setlocal conceallevel=0
    endif
endfunction
nnoremap <leader>jc :call ToggleJsonSyntaxConceal()<cr>
nnoremap <leader>js :set syntax=json<cr>



" Uppercase commands to counteract common typos.
command W w
command Q q
command WQ wq
command Wq wq

" Convert Alt Gr + space to normal space (counteract a common typo).
inoremap Â  <space>



" Save.
inoremap <c-s> <c-r>=col('.') == col('$') ? "\<lt>esc>`^:w\<lt>cr>a" : "\<lt>esc>`^:w\<lt>cr>i"<cr>
nnoremap <c-s> :w<cr>

" Tab navigation.
nnoremap <c-tab> :tabnext<cr>
nnoremap <c-s-tab> :tabprevious<cr>
inoremap <c-tab> <c-o>:tabnext<cr>
inoremap <c-s-tab> <c-o>:tabprevious<cr>
vnoremap <c-tab> <esc>:tabnext<cr>
vnoremap <c-s-tab> <esc>:tabprevious<cr>

" Select all.
inoremap <c-a> <esc>gg<s-v>G

" Wrap to next/previous line on arrow key presses.
inoremap <silent> <left> <c-r>=col('.') == 1 ? "\<lt>c-o>gkg$" : "\<lt>left>"<cr>
inoremap <silent> <right> <c-r>=col('.') == col('$') ? "\<lt>c-o>gjg0" : "\<lt>right>"<cr>

" Move screen lines, i.e. if text is wrapped, then move as you see the text flow, not as it actually is.
inoremap <home> <c-o>g0
inoremap <end> <c-o>g$

" Emulate common shift + keys functionality.
inoremap <silent> <s-up> <c-o>v<up>
vnoremap <silent> <s-up> <up>
inoremap <silent> <s-down> <c-o>v<down>
vnoremap <silent> <s-down> <down>
inoremap <silent> <s-left> <c-r>=col('.') == 1 ? "\<lt>c-o>gkg$v" : "\<lt>c-o>hv"<cr>
inoremap <silent> <s-right> <c-r>=col('.') == col('$') ? "\<lt>c-o>gjg0v" : "\<lt>c-o>v"<cr>
inoremap <silent> <s-home> <left><c-o>v<home>
inoremap <silent> <s-end> <c-o>v<end><left>

" Common copy hotkeys.
nnoremap <c-insert> V"+y<esc>:let @*=@+<cr>:echo "Line copied."<cr>
vnoremap <c-insert> "+y<esc>:let @*=@+<cr>:echo "Copied."<cr>
vnoremap <c-c> "+y<esc>:let @*=@+<cr>:echo "Copied."<cr>

" Common insert hotkeys.
" Use <c-q> in GUI mode to insert control characters.
nnoremap <s-insert> "+P
inoremap <s-insert> <c-r>=col('.') == col('$') ? "\<lt>esc>`^\"+pa" : "\<lt>esc>`^\"+Pa"<cr>
cnoremap <c-v> <c-r>+
inoremap <c-v> <c-r>=col('.') == col('$') ? "\<lt>esc>`^\"+pa" : "\<lt>esc>`^\"+Pa"<cr>

" Replace contents, but delete the old selection to black hole register first so as not to replace insert buffer.
vnoremap <silent><expr> <s-insert> mode() ==# "V" ? "\"_x\"+P" : ":<esc>`>:exe col('.') == col('$')-1 ? \"normal! gv\\\"_x\\\"+p\" : \"normal! gv\\\"_x\\\"+Pl\"<cr>"
vnoremap <silent><expr> <c-v> mode() ==# "V" ? "\"_x\"+P" : ":<esc>`>:exe col('.') == col('$')-1 ? \"normal! gv\\\"_x\\\"+p\" : \"normal! gv\\\"_x\\\"+Pl\"<cr>"

" Common search hotkey.
inoremap <c-f> <esc>`^/
nnoremap <c-f> /
vnoremap <c-f> <esc>/<c-r>*<cr>

" Common search and replace hotkey.
nnoremap <c-h> :%s/\v/g\|:silent noh<left><left><left><left><left><left><left><left><left><left><left><left><left><left>
vnoremap <c-h> :s/\v/g\|:silent noh<left><left><left><left><left><left><left><left><left><left><left><left><left><left>



" Select/cancel and scroll for lists.
" Remap must be enabled e.g. for CoC selection lists to work.
" Without remap, Omni completion list would be shown instead of CoC.
imap <a-j> <c-n>
imap <a-k> <c-p>
imap <a-h> <c-e>
imap <a-l> <c-y>
" This is for CoC reference match list searching. Still need to select using <cr>.
map <a-j> <down>
map <a-k> <up>
" This is for some plugins such as taglist to select ergonomically.
map <c-j> <cr>



" Switch to alternate file (usually previously edited buffer).
nnoremap <leader>sa :b#<cr><esc>`"

" Uppercase word under cursor.
nnoremap <leader>U gUiw

" Toggle menubar.
nnoremap <f5> :if &go=~#'m'<bar>set go-=m<bar>else<bar>set go+=m<bar>endif<cr>
inoremap <f5> <esc>:if &go=~#'m'<bar>set go-=m<bar>else<bar>set go+=m<bar>endif<cr>

" Center search matches.
nnoremap n nzz
nnoremap N Nzz

" Clear search highlight.
nnoremap <silent> <c-n> :silent noh<cr>

" Incremental search next without highlight.
cnoremap <c-n> <cr>:noh<cr>/<up>

" More ergonomic window commands.
" More defined later with Arpeggio.
nnoremap <c-f4> <c-w>c
vnoremap <c-f4> <c-w>c
inoremap <c-f4> <esc><c-w>c
nnoremap <leader>ww <c-w>=
nnoremap <leader>wj <c-w>15<
nnoremap <leader>wk <c-w>15>
nnoremap <leader>w- <c-w>5-
nnoremap <leader>w+ <c-w>5+



" Netrw explorer config.
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+' " Hide dotfiles by default in Netrw Directory Listing.
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
function ToggleNetrw()
    if &ft ==# 'netrw'
        exe "normal \<c-w>c"
    else
        exe "normal :Vexplore .\<cr>"
    endif
endfunction
nnoremap <silent> <leader>n :call ToggleNetrw()<cr>



" Tab width configs.
function SetTabWidth(newwidth)
    let &tabstop = a:newwidth
    let &shiftwidth = a:newwidth " Set indent (using keys << or >>) width.
    let &softtabstop = a:newwidth " Set indent width in insert mode using tab.
    echo "Tab width set to:" a:newwidth
endfunction

silent call SetTabWidth(4) " Default tab width.

function s:WhitespaceToTabWidth()
    normal! ^
    let tabwidth = col('.') - 1
    if tabwidth > 0
        call SetTabWidth(tabwidth)
    endif
endfunction

" Set tab width to current line whitespace width.
nnoremap <leader><tab> :call <SID>WhitespaceToTabWidth()<cr>



" Relative line numbering came in Vim 7.3.
if version >= 703
    function s:ToggleRelativeNumbering()
        if &rnu
            set rnu!
            echo 'Absolute numbering set.'
        else
            set relativenumber
            echo 'Relative numbering set.'
        endif
        return ''
    endfunction
    inoremap <silent> <f3> <c-r>=<SID>ToggleRelativeNumbering()<cr>
    nnoremap <silent> <f3> :call <SID>ToggleRelativeNumbering()<cr>
endif

function s:ToggleWrap()
    if &wrap
        set nowrap
        echo 'No wrap set.'
    else
        set wrap
        echo 'Wrap set.'
    endif
    return ''
endfunction
inoremap <silent> <f2> <c-r>=<SID>ToggleWrap()<cr>
nnoremap <silent> <f2> :call <SID>ToggleWrap()<cr>

" Print file info: encoding and format.
function s:PrintFileInfo()
    redir => filename
    silent !echo %:p
    redir END
    let filename = substitute(filename, ".*\n\(.*\n\)", "\1", "")
    let n = confirm(filename . "\n" . &fileencoding . "\n" . &ff, "", 1, "Info")
endfunction
nnoremap <f6> :call <SID>PrintFileInfo()<cr>

" Set file encoding dialog.
function s:SetFileEncoding()
    let n = confirm("Select file encoding:\n(current: " . &fileencoding . ")", "&UTF-8\n&ISO-8859-1\n&Cancel", 3, "Question")
    if n == 1
        set fileencoding=utf-8
    elseif n == 2
        set fileencoding=iso-8859-1
    endif
endfunction
nnoremap <f7> :call <SID>SetFileEncoding()<cr>

" Set file format dialog.
function s:SetFileFormat()
    let n = confirm("Select format for writing the file:\n(current: " . &ff . ")", "&Unix\n&Dos\n&Mac\n&Cancel", 4, "Question")
    if n == 1
        set ff=unix
    elseif n == 2
        set ff=dos
    elseif n == 3
        set ff=mac
    endif
endfunction
nnoremap <f8> :call <SID>SetFileFormat()<cr>

" Font zooming.
if has('gui_running') && exists('g:zoom_functions') && g:zoom_functions == 1
    if !exists('g:zoom_level')
        let g:zoom_level = 1
    endif

    function s:ChangeFontSize(delta)

        if exists('g:alt_font_in_use')
            silent call <SID>ToggleAlternativeFont()
        endif

        let fontsize = substitute(&guifont, '[^0-9]', '', 'g')
        let fontname = substitute(&guifont, '[0-9]', '', 'g')
        let fontname = substitute(fontname, ':h:cANSI', '', 'g')

        let g:zoom_level = g:zoom_level + a:delta
        if g:zoom_level > 12
            let g:zoom_level = 12
            return ''
        endif
        if g:zoom_level < 0
            let g:zoom_level = 0
            return ''
        endif

        let fontsize = fontsize + 2 * a:delta
        if has('win32') || has ('win64')
            let &guifont = fontname . ':h' . fontsize . ':cANSI'
        else
            let &guifont = fontname . fontsize
        endif
        let &lines = g:dlines
        let &columns = g:dcols
        echo 'Font set to: ' &guifont
        return ''
    endfunction

    nnoremap + :call <SID>ChangeFontSize(1)<cr>
    nnoremap - :call <SID>ChangeFontSize(-1)<cr>
    inoremap <c-mousedown> <c-r>=<SID>ChangeFontSize(1)<cr>
    nnoremap <c-mousedown> :call <SID>ChangeFontSize(1)<cr>
    inoremap <c-mouseup> <c-r>=<SID>ChangeFontSize(-1)<cr>
    nnoremap <c-mouseup> :call <SID>ChangeFontSize(-1)<cr>
endif

if has('gui_running')
    function s:ToggleAlternativeFont()

        if !exists('g:alt_font')
            return ''
        endif

        if exists('g:alt_font_in_use')
            let &guifont = g:alt_font_in_use
            unlet g:alt_font_in_use
            echo 'Normal font in use: ' &guifont
        else
            let g:alt_font_in_use = &guifont
            let &guifont = g:alt_font
            echo 'Alternative font in use: ' &guifont
        endif
        let &lines = g:dlines
        let &columns = g:dcols
        return ''

    endfunction
    nnoremap Â¨ :call <SID>ToggleAlternativeFont()<cr>

    nnoremap <s-ScrollWheelUp> 5zh
    nnoremap <s-ScrollWheelDown> 5zl
endif

function! OnVimEnter()

    " Unite
    if exists(':Unite')
        nnoremap <leader>b :Unite buffer<cr>

        if !(has('win32') || has('win64')) && (executable('rg') || executable('ag') || executable('find'))
            " Find files.
            nnoremap <leader>ff :Unite -start-insert file_rec/async:. buffer:-<cr>
            vnoremap <leader>ff :Unite -start-insert file_rec/async:. buffer:-<cr><c-r>*
            " Find files named like current file, extension removed. Useful e.g. when dealing with .ts/.html/.css.
            nnoremap <leader>fc :let @u="<c-r>=expand('%:t:r')<cr>"<cr>:Unite -start-insert file_rec/async:. buffer:-<cr><c-r>u
        elseif executable('git')
            nnoremap <leader>ff :Unite -start-insert file_rec/git:. buffer:-<cr>
            vnoremap <leader>ff :Unite -start-insert file_rec/git:. buffer:-<cr><c-r>*
            nnoremap <leader>fc :let @u="<c-r>=expand('%:t:r')<cr>"<cr>:Unite -start-insert file_rec/git:. buffer:-<cr><c-r>u
        endif

        nnoremap <leader>u :UniteResume<cr>
        nnoremap <leader>o :Unite outline<cr>
        nnoremap <leader>g :Unite grep:.<cr>
        " Search selected text.
        vnoremap <leader>g :Unite grep:.::<c-r>*<cr>
        " Search word under cursor.
        nnoremap <leader>gw viw:Unite grep:.::<c-r>*<cr>
        " Search current filename, extension removed.
        nnoremap <leader>gc :Unite grep:.::<c-r>=expand('%:t:r')<cr><cr>
        " Search Angular.js keywords.
        nnoremap <leader>ga :Unite -start-insert grep:.::\\.(filter\|provider\|controller\|directive\|factory\|service)\\(\\'.+\\'<cr>
    endif

    if exists(':Arpeggio')
        " Insert mode toggles. Grave moves cursor to ^, or the editing mark.
        call arpeggio#map('i', '', 0, 'fj', '<esc>`^')
        call arpeggio#map('n', '', 0, 'fj', 'i<c-r>=col(".") == col("$")-1 ? "\<lt>right>" : ""<cr>')

        " More ergonomic window commands.
        call arpeggio#map('n', 's', 0, 'wc', '<c-w>c') " close
        call arpeggio#map('n', 's', 0, 'wh', '<c-w>s') " horizontal split
        call arpeggio#map('n', 's', 0, 'wv', '<c-w>v') " vertical split
        call arpeggio#map('n', 's', 0, 'wj', '<c-w>h<c-w>j') " go to next window left/down
        call arpeggio#map('n', 's', 0, 'wk', '<c-w>l<c-w>k') " go to next window right/up

        " Toggle Git blame window and log for current file.
        if exists(':Git')
            function ToggleGitBlame()
                if @% =~# 'fugitiveblame'
                    exe "normal \<c-w>c"
                else
                    exe "normal :Git blame\<cr>"
                endif
            endfunction
            call arpeggio#map('n', 's', 0, 'gb', ':call ToggleGitBlame()<cr>')
            call arpeggio#map('n', 's', 0, 'gl', ':Git log -p %<cr>')
        endif

        " Vimagit staging.
        if exists(':Magit')
            call arpeggio#map('n', 's', 0, 'gs', ':Magit<cr>')
        endif
    endif

    " tcomment
    if exists('g:loaded_tcomment')
        " Comment out/in the current/selected line(s).
        nmap <silent> <leader>cc Ã¥c
        vmap <silent> <leader>cc Ã¥
    endif

    " Formatting shortcuts for Prettier.
    if exists(':Prettier')
        vmap <leader>p :PrettierPartial<cr>
        vmap <leader>f :PrettierFragment<cr>
        nnoremap <leader>jp :set syntax=json<cr>:Prettier<cr>
    endif

    " Toggle ANSI escape sequences.
    if exists(':AnsiEsc')
        nnoremap <leader>e :AnsiEsc<cr>
    endif

    " Toggle indent guides.
    if exists(':IndentGuidesToggle')
        nnoremap <leader>i :IndentGuidesToggle<cr>
    endif

    " Toggle taglist.
    if exists(':TlistToggle')
        nnoremap <f1> :TlistToggle<cr>
        inoremap <f1> <c-o>:TlistToggle<cr>
    endif

    " XML formatting using Python.
    if executable('python')
        let s:python_path='python'
    endif
    if isdirectory($HOME . '/.pyenv/versions')
        " Use the latest Python virtual environment version 3.x
        let s:python_path = system('ls -1v ' . $HOME . '/.pyenv/versions/*/bin/python3\.? | tail -n 1 | tr -d "\n"')
    endif
    if exists('s:python_path')
        execute 'nnoremap <leader>x :%!' . s:python_path ' -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"<cr><cr>:%s/^[ \t]*$\n//g<cr>'
    endif

    " Code completion stuff etc.
    if exists(':CocStart')
        function s:ShowDocumentation(hover_only)
            if (a:hover_only != 1 && index(['vim','help'], &filetype) >= 0)
                execute 'h '.expand('<cword>')
            else
                call CocAction('doHover')
            endif
        endfunction
        nnoremap <silent> <leader>cs :call <SID>ShowDocumentation(0)<cr>
        nnoremap <silent> <leader>cg :CocDiagnostics<cr>
        nmap <leader>ca <Plug>(coc-codeaction-selected)<cr>
        nmap <leader>cd <Plug>(coc-definition)
        nmap <leader>ce <Plug>(coc-rename)
        nmap <leader>cf <Plug>(coc-format-selected)
        nmap <leader>ci <Plug>(coc-implementation)
        nmap <leader>cr <Plug>(coc-references)
        nmap <leader>ct <Plug>(coc-type-definition)
        nmap <leader>cx <Plug>(coc-fix-current)
        inoremap <silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<c-g>u\<cr>\<c-r>=coc#on_enter()\<cr>"
        inoremap <silent><expr> <c-j> coc#pum#visible() ? coc#pum#confirm() : "\<c-g>u\<cr>\<c-r>=coc#on_enter()\<cr>"
        inoremap <nowait><expr> <c-d> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<c-d>"
        inoremap <nowait><expr> <c-u> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<c-u>"

        " Note: the hover help hides the diagnostics float by design,
        " so it's better to have CursorHold autocommand off by default.
        let s:coc_hh_enabled = 0
        function s:CocHoverHelpOnOffToggle()
            if s:coc_hh_enabled == 0
                let s:coc_hh_enabled = 1
                set updatetime=250
                autocmd CursorHold * silent call <SID>ShowDocumentation(1)
                echo 'Conquer of Completion hover help: ON'
            else
                let s:coc_hh_enabled = 0
                set updatetime=4000
                autocmd! CursorHold
                echo 'Conquer of Completion hover help: OFF'
            endif
        endfunction
        nnoremap <silent> <leader>ch :call <SID>CocHoverHelpOnOffToggle()<cr>

        let g:coc_enabled = 0
        function CocOnOffToggle()
            if g:coc_enabled == 0
                let g:coc_enabled = 1
                CocStart
                echo 'Conquer of Completion: ON'
            else
                let g:coc_enabled = 0
                echo 'Conquer of Completion: OFF'
                silent! call coc#rpc#stop()
                echo 'Ignore the error.'
            endif
        endfunction

        nnoremap <silent> <leader>co :call CocOnOffToggle()<cr>
        if exists(':Arpeggio')
            call arpeggio#map('n', 's', 0, 'co', ':call CocOnOffToggle()<cr>')
        endif
    endif

    " CoC and mode toggles.
    nnoremap <silent> <c-space> :exe exists('g:coc_enabled') && g:coc_enabled == 1 ? ':call feedkeys("i\<lt>c-r>=coc#refresh()\<lt>cr>")' : 'startinsert'<cr>
    inoremap <silent> <c-space> <c-r>=exists('g:coc_enabled') && g:coc_enabled == 1 ? "\<lt>c-r>=coc#refresh()\<lt>cr>" : "\<lt>esc>`^"<cr>

    " GitHub Copilot
    if exists(':Copilot')
        function CopOnOffToggle()
            if g:copilot_enabled == v:false
                let g:copilot_enabled = v:true
                Copilot enable
                echo 'Copilot enabled'
            else
                let g:copilot_enabled = v:false
                echo 'Copilot disabled'
                Copilot disable
            endif
        endfunction
        inoremap <silent> <a-c> <Plug>(copilot-dismiss)
        inoremap <silent> <a-n> <Plug>(copilot-next)
        inoremap <silent> <a-p> <Plug>(copilot-previous)
        inoremap <silent> <a-a> <esc>:Copilot panel<cr>

        nnoremap <silent> <leader>cp :call CopOnOffToggle()<cr>
        if exists(':Arpeggio')
            call arpeggio#map('n', 's', 0, 'cp', ':call CopOnOffToggle()<cr>')
        endif
    endif

    " There are so many <leader>c shortcuts that preventing accidental delete motion is nice.
    nmap <silent> <leader>c <Nop>
    vmap <silent> <leader>c <Nop>

    " Need to set these last here, otherwise they don't always work.
    set visualbell " Set visual bell instead of audible beep.
    set t_vb= " Disable visual flashing on bell.

    " Define g:alt_font to start with it.
    if has('gui_running')
        silent call <SID>ToggleAlternativeFont()
    endif

    if exists('*OnVimEnterExtra')
        call OnVimEnterExtra()
    endif

endfunction

function! OnBufferRead()
    " Set tab width to that of first line beginning with white space,
    " but ignore comment lines (usually starting with *, /, # or ").
    try
        exe "normal! gg/^\\( \\|\\t\\)\\+[^*/#\"]\<cr>"
        silent noh
        silent call <SID>WhitespaceToTabWidth()
    catch
        " Don't error in case the search pattern fails.
    endtry

    " Returns cursor to previous position when opening buffers.
    if line("'\"") > 1 && line("'\"") <= line('$')
        exe 'normal! `"'
    endif
endfunction



" Host specific stuff, e.g.:
" function OnVimEnterExtra()
"    if stridx(&filetype, 'typescript') > -1
"        :call CocOnOffToggle()
" etc.
if filereadable($HOME . '/.vimrc_extra')
    source $HOME/.vimrc_extra
endif
